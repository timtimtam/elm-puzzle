module Evergreen.Migrate.V38 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Array
import Evergreen.V32.Direction3d
import Evergreen.V32.Frame3d
import Evergreen.V32.Geometry.Types
import Evergreen.V32.Internal.Body
import Evergreen.V32.Internal.Constraint
import Evergreen.V32.Internal.Contact
import Evergreen.V32.Internal.Material
import Evergreen.V32.Internal.Matrix3
import Evergreen.V32.Internal.Shape
import Evergreen.V32.Internal.Transform3d
import Evergreen.V32.Internal.Vector3
import Evergreen.V32.Internal.World
import Evergreen.V32.Physics.Coordinates
import Evergreen.V32.Physics.World
import Evergreen.V32.Point2d
import Evergreen.V32.Point3d
import Evergreen.V32.Scene3d.Material
import Evergreen.V32.Scene3d.Types
import Evergreen.V32.Shapes.Convex
import Evergreen.V32.Shapes.Plane
import Evergreen.V32.Shapes.Sphere
import Evergreen.V32.Types
import Evergreen.V32.Vector2d
import Evergreen.V38.Direction3d
import Evergreen.V38.Frame3d
import Evergreen.V38.Geometry.Types
import Evergreen.V38.Internal.Body
import Evergreen.V38.Internal.Constraint
import Evergreen.V38.Internal.Contact
import Evergreen.V38.Internal.Material
import Evergreen.V38.Internal.Matrix3
import Evergreen.V38.Internal.Shape
import Evergreen.V38.Internal.Transform3d
import Evergreen.V38.Internal.Vector3
import Evergreen.V38.Internal.World
import Evergreen.V38.Physics.Coordinates
import Evergreen.V38.Physics.World
import Evergreen.V38.Point2d
import Evergreen.V38.Point3d
import Evergreen.V38.Scene3d.Material
import Evergreen.V38.Scene3d.Types
import Evergreen.V38.Shapes.Convex
import Evergreen.V38.Shapes.Plane
import Evergreen.V38.Shapes.Sphere
import Evergreen.V38.Types
import Evergreen.V38.Vector2d
import Evergreen.V38.Vector3d
import Lamdera.Migrations exposing (..)
import List
import Time


frontendModel : Evergreen.V32.Types.FrontendModel -> ModelMigration Evergreen.V38.Types.FrontendModel Evergreen.V38.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V32.Types.BackendModel -> ModelMigration Evergreen.V38.Types.BackendModel Evergreen.V38.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V32.Types.FrontendMsg -> MsgMigration Evergreen.V38.Types.FrontendMsg Evergreen.V38.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V32.Types.ToBackend -> MsgMigration Evergreen.V38.Types.ToBackend Evergreen.V38.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V32.Types.BackendMsg -> MsgMigration Evergreen.V38.Types.BackendMsg Evergreen.V38.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V32.Types.ToFrontend -> MsgMigration Evergreen.V38.Types.ToFrontend Evergreen.V38.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V32.Types.BackendModel -> Evergreen.V38.Types.BackendModel
migrate_Types_BackendModel old =
    { world = old.world |> migrate_Physics_World_World migrate_Types_BackendWorldData
    , previousTick = old.previousTick
    , nextId = old.nextId
    }


migrate_Direction3d_Direction3d : (coordinates_old -> coordinates_new) -> Evergreen.V32.Direction3d.Direction3d coordinates_old -> Evergreen.V38.Direction3d.Direction3d coordinates_new
migrate_Direction3d_Direction3d migrate_coordinates old =
    old |> migrate_Geometry_Types_Direction3d migrate_coordinates


migrate_Frame3d_Frame3d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> (defines_old -> defines_new) -> Evergreen.V32.Frame3d.Frame3d units_old coordinates_old defines_old -> Evergreen.V38.Frame3d.Frame3d units_new coordinates_new defines_new
migrate_Frame3d_Frame3d old =
    old |> migrate_Geometry_Types_Frame3d


migrate_Geometry_Types_Direction3d : (coordinates_old -> coordinates_new) -> Evergreen.V32.Geometry.Types.Direction3d coordinates_old -> Evergreen.V38.Geometry.Types.Direction3d coordinates_new
migrate_Geometry_Types_Direction3d migrate_coordinates old =
    case old of
        Evergreen.V32.Geometry.Types.Direction3d p0 ->
            Evergreen.V38.Geometry.Types.Direction3d p0


migrate_Geometry_Types_Frame3d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> (defines_old -> defines_new) -> Evergreen.V32.Geometry.Types.Frame3d units_old coordinates_old defines_old -> Evergreen.V38.Geometry.Types.Frame3d units_new coordinates_new defines_new
migrate_Geometry_Types_Frame3d migrate_units migrate_coordinates migrate_defines old =
    case old of
        Evergreen.V32.Geometry.Types.Frame3d p0 ->
            Evergreen.V38.Geometry.Types.Frame3d
                { originPoint = p0.originPoint |> migrate_Geometry_Types_Point3d migrate_units migrate_coordinates
                , xDirection = p0.xDirection |> migrate_Geometry_Types_Direction3d migrate_coordinates
                , yDirection = p0.yDirection |> migrate_Geometry_Types_Direction3d migrate_coordinates
                , zDirection = p0.zDirection |> migrate_Geometry_Types_Direction3d migrate_coordinates
                }


migrate_Geometry_Types_Point2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V32.Geometry.Types.Point2d units_old coordinates_old -> Evergreen.V38.Geometry.Types.Point2d units_new coordinates_new
migrate_Geometry_Types_Point2d migrate_units migrate_coordinates old =
    case old of
        Evergreen.V32.Geometry.Types.Point2d p0 ->
            Evergreen.V38.Geometry.Types.Point2d p0


migrate_Geometry_Types_Point3d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V32.Geometry.Types.Point3d units_old coordinates_old -> Evergreen.V38.Geometry.Types.Point3d units_new coordinates_new
migrate_Geometry_Types_Point3d migrate_units migrate_coordinates old =
    case old of
        Evergreen.V32.Geometry.Types.Point3d p0 ->
            Evergreen.V38.Geometry.Types.Point3d p0


migrate_Geometry_Types_Vector2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V32.Geometry.Types.Vector2d units_old coordinates_old -> Evergreen.V38.Geometry.Types.Vector2d units_new coordinates_new
migrate_Geometry_Types_Vector2d migrate_units migrate_coordinates old =
    case old of
        Evergreen.V32.Geometry.Types.Vector2d p0 ->
            Evergreen.V38.Geometry.Types.Vector2d p0


migrate_Geometry_Types_Vector3d old =
    case old of
        Evergreen.V32.Geometry.Types.Vector3d p0 ->
            Evergreen.V38.Geometry.Types.Vector3d p0


migrate_Internal_Body_Body : (data_old -> data_new) -> Evergreen.V32.Internal.Body.Body data_old -> Evergreen.V38.Internal.Body.Body data_new
migrate_Internal_Body_Body migrate_data old =
    { id = old.id
    , data = old.data |> migrate_data
    , material = old.material |> migrate_Internal_Material_Material
    , transform3d =
        old.transform3d
            |> migrate_Internal_Transform3d_Transform3d migrate_Physics_Coordinates_WorldCoordinates
                (\rec ->
                    { defines = rec.defines |> migrate_Internal_Shape_CenterOfMassCoordinates
                    }
                )
    , centerOfMassTransform3d =
        old.centerOfMassTransform3d
            |> migrate_Internal_Transform3d_Transform3d migrate_Physics_Coordinates_BodyCoordinates
                (\rec ->
                    { defines = rec.defines |> migrate_Internal_Shape_CenterOfMassCoordinates
                    }
                )
    , velocity = old.velocity |> migrate_Internal_Vector3_Vec3
    , angularVelocity = old.angularVelocity |> migrate_Internal_Vector3_Vec3
    , mass = old.mass
    , shapes = old.shapes |> List.map (migrate_Internal_Shape_Shape migrate_Internal_Shape_CenterOfMassCoordinates)
    , worldShapes = old.worldShapes |> List.map (migrate_Internal_Shape_Shape migrate_Physics_Coordinates_WorldCoordinates)
    , force = old.force |> migrate_Internal_Vector3_Vec3
    , torque = old.torque |> migrate_Internal_Vector3_Vec3
    , boundingSphereRadius = old.boundingSphereRadius
    , linearDamping = old.linearDamping
    , angularDamping = old.angularDamping
    , invMass = old.invMass
    , invInertia = old.invInertia |> migrate_Internal_Matrix3_Mat3
    , invInertiaWorld = old.invInertiaWorld |> migrate_Internal_Matrix3_Mat3
    }


migrate_Internal_Constraint_Constraint : (coordinates_old -> coordinates_new) -> Evergreen.V32.Internal.Constraint.Constraint coordinates_old -> Evergreen.V38.Internal.Constraint.Constraint coordinates_new
migrate_Internal_Constraint_Constraint migrate_coordinates old =
    case old of
        Evergreen.V32.Internal.Constraint.PointToPoint p0 p1 ->
            Evergreen.V38.Internal.Constraint.PointToPoint (p0 |> migrate_Internal_Vector3_Vec3)
                (p1 |> migrate_Internal_Vector3_Vec3)

        Evergreen.V32.Internal.Constraint.Hinge p0 p1 p2 p3 ->
            Evergreen.V38.Internal.Constraint.Hinge (p0 |> migrate_Internal_Vector3_Vec3)
                (p1 |> migrate_Internal_Vector3_Vec3)
                (p2 |> migrate_Internal_Vector3_Vec3)
                (p3 |> migrate_Internal_Vector3_Vec3)

        Evergreen.V32.Internal.Constraint.Lock p0 p1 p2 p3 p4 p5 p6 p7 ->
            Evergreen.V38.Internal.Constraint.Lock (p0 |> migrate_Internal_Vector3_Vec3)
                (p1 |> migrate_Internal_Vector3_Vec3)
                (p2 |> migrate_Internal_Vector3_Vec3)
                (p3 |> migrate_Internal_Vector3_Vec3)
                (p4 |> migrate_Internal_Vector3_Vec3)
                (p5 |> migrate_Internal_Vector3_Vec3)
                (p6 |> migrate_Internal_Vector3_Vec3)
                (p7 |> migrate_Internal_Vector3_Vec3)

        Evergreen.V32.Internal.Constraint.Distance p0 ->
            Evergreen.V38.Internal.Constraint.Distance p0


migrate_Internal_Constraint_ConstraintGroup : Evergreen.V32.Internal.Constraint.ConstraintGroup -> Evergreen.V38.Internal.Constraint.ConstraintGroup
migrate_Internal_Constraint_ConstraintGroup old =
    { bodyId1 = old.bodyId1
    , bodyId2 = old.bodyId2
    , constraints = old.constraints |> List.map (migrate_Internal_Constraint_Constraint migrate_Internal_Shape_CenterOfMassCoordinates)
    }


migrate_Internal_Contact_ContactGroup : (data_old -> data_new) -> Evergreen.V32.Internal.Contact.ContactGroup data_old -> Evergreen.V38.Internal.Contact.ContactGroup data_new
migrate_Internal_Contact_ContactGroup migrate_data old =
    { body1 = old.body1 |> migrate_Internal_Body_Body migrate_data
    , body2 = old.body2 |> migrate_Internal_Body_Body migrate_data
    , contacts = old.contacts
    }


migrate_Internal_Material_Material : Evergreen.V32.Internal.Material.Material -> Evergreen.V38.Internal.Material.Material
migrate_Internal_Material_Material old =
    old


migrate_Internal_Matrix3_Mat3 : Evergreen.V32.Internal.Matrix3.Mat3 -> Evergreen.V38.Internal.Matrix3.Mat3
migrate_Internal_Matrix3_Mat3 old =
    old


migrate_Internal_Shape_CenterOfMassCoordinates : Evergreen.V32.Internal.Shape.CenterOfMassCoordinates -> Evergreen.V38.Internal.Shape.CenterOfMassCoordinates
migrate_Internal_Shape_CenterOfMassCoordinates old =
    case old of
        Evergreen.V32.Internal.Shape.CenterOfMassCoordinates ->
            Evergreen.V38.Internal.Shape.CenterOfMassCoordinates


migrate_Internal_Shape_Shape : (coordinates_old -> coordinates_new) -> Evergreen.V32.Internal.Shape.Shape coordinates_old -> Evergreen.V38.Internal.Shape.Shape coordinates_new
migrate_Internal_Shape_Shape migrate_coordinates old =
    case old of
        Evergreen.V32.Internal.Shape.Convex p0 ->
            Evergreen.V38.Internal.Shape.Convex (p0 |> migrate_Shapes_Convex_Convex)

        Evergreen.V32.Internal.Shape.Plane p0 ->
            Evergreen.V38.Internal.Shape.Plane (p0 |> migrate_Shapes_Plane_Plane)

        Evergreen.V32.Internal.Shape.Sphere p0 ->
            Evergreen.V38.Internal.Shape.Sphere (p0 |> migrate_Shapes_Sphere_Sphere)

        Evergreen.V32.Internal.Shape.Particle p0 ->
            Evergreen.V38.Internal.Shape.Particle (p0 |> migrate_Internal_Vector3_Vec3)


migrate_Internal_Transform3d_Orientation3d : Evergreen.V32.Internal.Transform3d.Orientation3d -> Evergreen.V38.Internal.Transform3d.Orientation3d
migrate_Internal_Transform3d_Orientation3d old =
    case old of
        Evergreen.V32.Internal.Transform3d.Orientation3d p0 p1 p2 p3 ->
            Evergreen.V38.Internal.Transform3d.Orientation3d p0 p1 p2 p3


migrate_Internal_Transform3d_Transform3d : (coordinates_old -> coordinates_new) -> (defines_old -> defines_new) -> Evergreen.V32.Internal.Transform3d.Transform3d coordinates_old defines_old -> Evergreen.V38.Internal.Transform3d.Transform3d coordinates_new defines_new
migrate_Internal_Transform3d_Transform3d migrate_coordinates migrate_defines old =
    case old of
        Evergreen.V32.Internal.Transform3d.Transform3d p0 p1 ->
            Evergreen.V38.Internal.Transform3d.Transform3d (p0 |> migrate_Internal_Vector3_Vec3)
                (p1 |> migrate_Internal_Transform3d_Orientation3d)


migrate_Internal_Vector3_Vec3 : Evergreen.V32.Internal.Vector3.Vec3 -> Evergreen.V38.Internal.Vector3.Vec3
migrate_Internal_Vector3_Vec3 old =
    old


migrate_Internal_World_Protected : (data_old -> data_new) -> Evergreen.V32.Internal.World.Protected data_old -> Evergreen.V38.Internal.World.Protected data_new
migrate_Internal_World_Protected migrate_data old =
    case old of
        Evergreen.V32.Internal.World.Protected p0 ->
            Evergreen.V38.Internal.World.Protected (p0 |> migrate_Internal_World_World migrate_data)


migrate_Internal_World_World : (data_old -> data_new) -> Evergreen.V32.Internal.World.World data_old -> Evergreen.V38.Internal.World.World data_new
migrate_Internal_World_World migrate_data old =
    { bodies = old.bodies |> List.map (migrate_Internal_Body_Body migrate_data)
    , constraints = old.constraints |> List.map migrate_Internal_Constraint_ConstraintGroup
    , freeIds = old.freeIds
    , nextBodyId = old.nextBodyId
    , gravity = old.gravity |> migrate_Internal_Vector3_Vec3
    , contactGroups = old.contactGroups |> List.map (migrate_Internal_Contact_ContactGroup migrate_data)
    , simulatedBodies = old.simulatedBodies |> Array.map (migrate_Internal_Body_Body migrate_data)
    }


migrate_Physics_Coordinates_BodyCoordinates : Evergreen.V32.Physics.Coordinates.BodyCoordinates -> Evergreen.V38.Physics.Coordinates.BodyCoordinates
migrate_Physics_Coordinates_BodyCoordinates old =
    case old of
        Evergreen.V32.Physics.Coordinates.BodyCoordinates ->
            Evergreen.V38.Physics.Coordinates.BodyCoordinates


migrate_Physics_Coordinates_WorldCoordinates : Evergreen.V32.Physics.Coordinates.WorldCoordinates -> Evergreen.V38.Physics.Coordinates.WorldCoordinates
migrate_Physics_Coordinates_WorldCoordinates old =
    case old of
        Evergreen.V32.Physics.Coordinates.WorldCoordinates ->
            Evergreen.V38.Physics.Coordinates.WorldCoordinates


migrate_Physics_World_World : (data_old -> data_new) -> Evergreen.V32.Physics.World.World data_old -> Evergreen.V38.Physics.World.World data_new
migrate_Physics_World_World migrate_data old =
    old |> migrate_Internal_World_Protected migrate_data


migrate_Point2d_Point2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V32.Point2d.Point2d units_old coordinates_old -> Evergreen.V38.Point2d.Point2d units_new coordinates_new
migrate_Point2d_Point2d migrate_units migrate_coordinates old =
    old |> migrate_Geometry_Types_Point2d migrate_units migrate_coordinates


migrate_Point3d_Point3d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V32.Point3d.Point3d units_old coordinates_old -> Evergreen.V38.Point3d.Point3d units_new coordinates_new
migrate_Point3d_Point3d migrate_units migrate_coordinates old =
    old |> migrate_Geometry_Types_Point3d migrate_units migrate_coordinates


migrate_Scene3d_Material_Texture : (value_old -> value_new) -> Evergreen.V32.Scene3d.Material.Texture value_old -> Evergreen.V38.Scene3d.Material.Texture value_new
migrate_Scene3d_Material_Texture migrate_value old =
    old |> migrate_Scene3d_Types_Texture migrate_value


migrate_Scene3d_Types_Texture : (value_old -> value_new) -> Evergreen.V32.Scene3d.Types.Texture value_old -> Evergreen.V38.Scene3d.Types.Texture value_new
migrate_Scene3d_Types_Texture migrate_value old =
    case old of
        Evergreen.V32.Scene3d.Types.Constant p0 ->
            Evergreen.V38.Scene3d.Types.Constant (p0 |> migrate_value)

        Evergreen.V32.Scene3d.Types.Texture p0 ->
            Evergreen.V38.Scene3d.Types.Texture p0


migrate_Shapes_Convex_Convex : Evergreen.V32.Shapes.Convex.Convex -> Evergreen.V38.Shapes.Convex.Convex
migrate_Shapes_Convex_Convex old =
    { faces = old.faces
    , vertices = old.vertices
    , uniqueEdges = old.uniqueEdges
    , uniqueNormals = old.uniqueNormals
    , position = old.position |> migrate_Internal_Vector3_Vec3
    , inertia = old.inertia |> migrate_Internal_Matrix3_Mat3
    , volume = old.volume
    }


migrate_Shapes_Plane_Plane : Evergreen.V32.Shapes.Plane.Plane -> Evergreen.V38.Shapes.Plane.Plane
migrate_Shapes_Plane_Plane old =
    { normal = old.normal |> migrate_Internal_Vector3_Vec3
    , position = old.position |> migrate_Internal_Vector3_Vec3
    }


migrate_Shapes_Sphere_Sphere : Evergreen.V32.Shapes.Sphere.Sphere -> Evergreen.V38.Shapes.Sphere.Sphere
migrate_Shapes_Sphere_Sphere old =
    { radius = old.radius
    , position = old.position |> migrate_Internal_Vector3_Vec3
    , volume = old.volume
    , inertia = old.inertia |> migrate_Internal_Matrix3_Mat3
    }


migrate_Types_BackendWorldData : Evergreen.V32.Types.BackendWorldData -> Evergreen.V38.Types.BackendWorldData
migrate_Types_BackendWorldData old =
    case old of
        Evergreen.V32.Types.BackendStatic ->
            Evergreen.V38.Types.BackendStatic

        Evergreen.V32.Types.BackendPlayer p0 ->
            Evergreen.V38.Types.BackendPlayer
                { id = p0.id
                , torque = Evergreen.V38.Geometry.Types.Vector3d { x = 0, y = 0, z = 0 }
                , localTime = p0.time
                , sessionId = p0.sessionId
                , clients = p0.clients
                }


migrate_Types_ButtonState : Evergreen.V32.Types.ButtonState -> Evergreen.V38.Types.ButtonState
migrate_Types_ButtonState old =
    case old of
        Evergreen.V32.Types.Up ->
            Evergreen.V38.Types.Up

        Evergreen.V32.Types.Down ->
            Evergreen.V38.Types.Down


migrate_Types_ContactType : Evergreen.V32.Types.ContactType -> Evergreen.V38.Types.ContactType
migrate_Types_ContactType old =
    case old of
        Evergreen.V32.Types.Touch ->
            Evergreen.V38.Types.Touch

        Evergreen.V32.Types.Mouse ->
            Evergreen.V38.Types.Mouse


migrate_Types_FrontendModel : Evergreen.V32.Types.FrontendModel -> Evergreen.V38.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V32.Types.Lobby p0 ->
            Evergreen.V38.Types.Lobby
                { name = p0.name
                , width = p0.width
                , height = p0.height
                , playerColorTexture = p0.playerColorTexture |> Maybe.map (migrate_Scene3d_Material_Texture identity)
                , playerRoughnessTexture = p0.playerRoughnessTexture |> Maybe.map (migrate_Scene3d_Material_Texture identity)
                }

        Evergreen.V32.Types.Joined p0 ->
            Evergreen.V38.Types.Joined
                { id = p0.id
                , name = p0.name
                , width = p0.width
                , height = p0.height
                , playerColorTexture = p0.playerColorTexture |> Maybe.map (migrate_Scene3d_Material_Texture identity)
                , playerRoughnessTexture = p0.playerRoughnessTexture |> Maybe.map (migrate_Scene3d_Material_Texture identity)
                , cameraAngle = p0.cameraAngle |> migrate_Direction3d_Direction3d migrate_Physics_Coordinates_WorldCoordinates
                , leftKey = p0.leftKey |> migrate_Types_ButtonState
                , rightKey = p0.rightKey |> migrate_Types_ButtonState
                , upKey = p0.upKey |> migrate_Types_ButtonState
                , downKey = p0.downKey |> migrate_Types_ButtonState
                , mouseButtonState = p0.mouseButtonState |> migrate_Types_ButtonState
                , touches = p0.touches |> migrate_Types_TouchContact
                , currentTime = p0.currentTime
                , world = p0.world |> migrate_Physics_World_World migrate_Types_WorldData
                , joystickOffset = p0.joystickOffset |> migrate_Vector2d_Vector2d identity migrate_Types_ScreenCoordinates
                , viewPivotDelta = p0.viewPivotDelta |> migrate_Vector2d_Vector2d identity migrate_Types_ScreenCoordinates
                , lightPosition = p0.lightPosition |> migrate_Point3d_Point3d identity migrate_Physics_Coordinates_WorldCoordinates
                , lastContact = p0.lastContact |> migrate_Types_ContactType
                , pointerCapture = p0.pointerCapture |> migrate_Types_PointerCapture
                , historicalMovements =
                    p0.historicalMovements
                        |> List.map
                            (\rec1 ->
                                { movement = Evergreen.V38.Geometry.Types.Vector3d { x = 0, y = 0, z = 0 }
                                , time = rec1.time
                                }
                            )
                }


migrate_Types_PointerCapture : Evergreen.V32.Types.PointerCapture -> Evergreen.V38.Types.PointerCapture
migrate_Types_PointerCapture old =
    case old of
        Evergreen.V32.Types.PointerLocked ->
            Evergreen.V38.Types.PointerLocked

        Evergreen.V32.Types.PointerNotLocked ->
            Evergreen.V38.Types.PointerNotLocked


migrate_Types_ScreenCoordinates : Evergreen.V32.Types.ScreenCoordinates -> Evergreen.V38.Types.ScreenCoordinates
migrate_Types_ScreenCoordinates old =
    case old of
        Evergreen.V32.Types.ScreenCoordinates ->
            Evergreen.V38.Types.ScreenCoordinates


migrate_Types_ToBackend : Evergreen.V32.Types.ToBackend -> Evergreen.V38.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V32.Types.Join p0 ->
            Evergreen.V38.Types.Join p0

        Evergreen.V32.Types.UpdateMovement p0 p1 ->
            Evergreen.V38.Types.UpdateMovement (Evergreen.V38.Geometry.Types.Vector3d { x = 0, y = 0, z = 0 })
                p1

        Evergreen.V32.Types.NoOpToBackend ->
            Evergreen.V38.Types.NoOpToBackend


migrate_Types_ToFrontend : Evergreen.V32.Types.ToFrontend -> Evergreen.V38.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V32.Types.AssignId p0 ->
            Evergreen.V38.Types.AssignId p0

        Evergreen.V32.Types.UpdateEntities p0 ->
            Evergreen.V38.Types.NoOpToFrontend

        Evergreen.V32.Types.NoOpToFrontend ->
            Evergreen.V38.Types.NoOpToFrontend


migrate_Types_TouchContact : Evergreen.V32.Types.TouchContact -> Evergreen.V38.Types.TouchContact
migrate_Types_TouchContact old =
    case old of
        Evergreen.V32.Types.OneFinger p0 ->
            Evergreen.V38.Types.OneFinger
                { identifier = p0.identifier
                , screenPos = p0.screenPos |> migrate_Point2d_Point2d identity migrate_Types_ScreenCoordinates
                }

        Evergreen.V32.Types.NotOneFinger ->
            Evergreen.V38.Types.NotOneFinger


migrate_Types_WorldData : Evergreen.V32.Types.WorldData -> Evergreen.V38.Types.WorldData
migrate_Types_WorldData old =
    case old of
        Evergreen.V32.Types.Static ->
            Evergreen.V38.Types.Static

        Evergreen.V32.Types.Player p0 ->
            Evergreen.V38.Types.Static


migrate_Vector2d_Vector2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V32.Vector2d.Vector2d units_old coordinates_old -> Evergreen.V38.Vector2d.Vector2d units_new coordinates_new
migrate_Vector2d_Vector2d migrate_units migrate_coordinates old =
    old |> migrate_Geometry_Types_Vector2d migrate_units migrate_coordinates


migrate_Vector3d_Vector3d old =
    old |> migrate_Geometry_Types_Vector3d
